# -*- coding: utf-8 -*-
"""「convex.ipynb」的副本

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1avmoEQXzeflSCwRd6yjmVWH_zDISPd9G
"""

import cvxpy as cp
import numpy as np
from matplotlib import pyplot as plt
import os

"""Read import configurations"""

import json

class NDArrayEncoder(json.JSONEncoder):
    def default(self, obj):
        if isinstance(obj, mx.nd.NDArray):
            return obj.asnumpy().tolist()
        return json.JSONEncoder.default(self, obj)


filename = 'totalserver_1_trial_0'
with open('{}\\{}'.format( os.getcwd(), '{}{}'.format(filename, '.txt'))) as f:
    json_data = json.load(f)
# print(json_data['config'])
# print(json_data['jobs'])

# generate data
n = json_data['config']['totalJobs']   # Total jobs
a = np.zeros(n)              # Arrival Time
b = np.zeros(n)              # Deadline - Arrival Time
d = np.zeros(n)              # Deadline
w = np.zeros(n)              # Workload
for job in json_data['jobs']:
  a[job['index']] = job['arrivalTime']
  b[job['index']] = job['deadline'] - job['arrivalTime']
  d[job['index']] = job['deadline']
  w[job['index']] = job['workload']
dn = json_data['config']['totalDuration']  # Maximum duration

# solve for fixed t multiple identical servers without migration
m = json_data['config']['totalServers']
t = json_data['config']['totalDuration']
tj = np.minimum(b, t)
x = {}
for j in range(n):
  x[j] = cp.Variable((dn, m))
wl1 = np.ones((n, dn, m))
wl2 = np.ones((n, m))
vals = []
for j in range(n):
    vals += [cp.pos(w[j] - cp.sum(x[j][a[j]:tj[j]])) + cp.norm1(cp.multiply(wl1[j],x[j])) + cp.norm1(cp.multiply(wl2[j], cp.sum(x[j], axis=0)))]
obj = cp.Minimize(cp.sum(vals))

cost = x[0]
for j in range(1, n):
    cost += x[j]

constraints = [cost <= 1]
for j in range(n):
    constraints += [0 <= x[j], x[j] <= 1]

prob = cp.Problem(obj, constraints)

prob.solve()
print("optimal value", prob.value)
result = []
for i in range(n):
    result.append(x[i].value)
print(json.dumps(result))
#
# with open('{}\\{}'.format( os.getcwd(), '{}{}'.format(filename, '_result.txt')), 'w') as f:
#     f.write(result)
#
# for i in range(10):
#     for j in range(n):
#         wl1[j] = 1 / (np.abs(x[j].value)+0.0001)
#         wl2[j] = 1 / (np.abs(np.sum(x[j].value, axis=0))+0.0001)
#     vals = []
#     for j in range(n):
#         vals += [cp.pos(w[j] - cp.sum(x[j][a[j]:tj[j]])) + cp.sum(cp.multiply(wl1[j],x[j])) + cp.norm1(cp.multiply(wl2[j], cp.sum(x[j], axis=0)))]
#     obj = cp.Minimize(cp.sum(vals))
#
#     cost = x[0]
#     for j in range(1, n):
#         cost += x[j]
#
#     constraints = [cost <= 1]
#     for j in range(n):
#         constraints += [0 <= x[j], x[j] <= 1]
#     prob = cp.Problem(obj, constraints)
#     prob.solve()
#     print("optimal value", prob.value)