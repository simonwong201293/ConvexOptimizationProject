# -*- coding: utf-8 -*-
"""convex.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tSu-KNc9jTtkYu6x0kGGyBDMrgwwMXut
"""

import cvxpy as cp
import numpy as np
from matplotlib import pyplot as plt

"""Read import configurations"""
import pickle
import os
import json
serverOpt = [1, 10, 100, 1000]
for o in range(2, 4):
    for l in range(9, 10):
        try:
            filename = 'totalserver_{}_trial_{}'.format(serverOpt[o], l)
            with open('{}\\{}'.format(os.getcwd(), '{}{}'.format(filename, '.txt'))) as f:
                json_data = json.load(f)
            print('Handling {}\\{}'.format(os.getcwd(), '{}{}'.format(filename, '.txt')))
            # print(json_data['config'])
            # print(json_data['jobs'])
            # generate data
            n = json_data['config']['totalJobs']   # Total jobs
            a = np.zeros(n)              # Arrival Time
            b = np.zeros(n)              # Deadline - Arrival Time
            d = np.zeros(n)              # Deadline
            w = np.zeros(n)              # Workload
            for job in json_data['jobs']:
              a[job['index']] = job['arrivalTime']
              b[job['index']] = job['deadline'] - job['arrivalTime']
              d[job['index']] = job['deadline']
              w[job['index']] = job['workload']
            dn = json_data['config']['totalDuration']  # Maximum duration

            m = json_data['config']['totalServers']
            t = json_data['config']['totalDuration']
            tj = np.minimum(b, t)
            x = {}
            for j in range(n):
              x[j] = cp.Variable((dn, m))
            wl1 = np.ones((n, dn, m))
            wl2 = np.ones((n, m))
            vals = []
            for j in range(n):
                vals += [cp.pos(w[j] - cp.sum(x[j][a[j]:tj[j]])) + 1e-3 * cp.norm1(cp.multiply(wl1[j],x[j])) + 1e-3 * cp.norm1(cp.multiply(wl2[j], cp.sum(x[j], axis=0)))]
            obj = cp.Minimize(cp.sum(vals))

            cost = x[0]
            for j in range(1, n):
                cost += x[j]

            constraints = [cost <= 1]
            for j in range(n):
                constraints += [0 <= x[j], x[j] <= 1]
            prob = cp.Problem(obj, constraints)
            prob.solve()
            print("optimal value", prob.value)
            result = np.empty((n,m,t))
            # for i in range(n):
            #     print(x.shape)
            for i in range(n):
                for j in range(m):
                    for k in range(t):
                        result[i][j][k] = x[i].value[k][j]
                # result[i] = np.array(x[i].value)
            # tmp = np.array(result).reshape((n,t,m))
            with open('{}\\{}'.format( os.getcwd(), '{}{}'.format(filename, '_result.txt')), 'w') as f:
                f.write(json.dumps(result.tolist()))
        except error:
            print(error)
# # np.savetxt('{}\\{}'.format( os.getcwd(), '{}{}'.format(filename, '_result.txt')), tmp)
# for i in range(10):
#     for j in range(n):
#         wl1[j] = 1 / (np.abs(x[j].value)+0.0001)
#         wl2[j] = 1 / (np.abs(np.sum(x[j].value, axis=0))+0.0001)
#     vals = []
#     for j in range(n):
#         vals += [cp.pos(w[j] - cp.sum(x[j][a[j]:tj[j]])) + 1e-3 * cp.sum(cp.multiply(wl1[j],x[j])) + 1e-3 * cp.norm1(cp.multiply(wl2[j], cp.sum(x[j], axis=0)))]
#     obj = cp.Minimize(cp.sum(vals))
#
#     cost = x[0]
#     for j in range(1, n):
#         cost += x[j]
#
#     constraints = [cost <= 1]
#     for j in range(n):
#         constraints += [0 <= x[j], x[j] <= 1]
#     prob = cp.Problem(obj, constraints)
#     prob.solve()
#     print("optimal value", prob.value)